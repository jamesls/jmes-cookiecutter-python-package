[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
  { name="{{ cookiecutter.full_name }}", email="{{ cookiecutter.email }}"},
]
license = "Apache-2.0"
readme = "README.md"

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
requires-python = ">=3.12.0,<3.13.0"
dependencies = [
]

[tool.uv]
dev-dependencies = [
  "pre-commit",
  "pytest",
  "pytest-cov",
  "mkdocstrings",
  "mkdocs-material",
  "pymdown-extensions",
  "pytest-github-actions-annotate-failures",
  "jmeslog",
  "poethepoet",
  "ruff",
  "pyright",
  "pygments",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}"]

[tool.ruff]
line-length = 79

[tool.ruff.format]
quote-style = "preserve"
preview = true

[tool.pytest.ini_options]
addopts = """\
    --cov {{ cookiecutter.package_name }} \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.run]
branch = true
source = ["src/"]


[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    'raise NotImplementedError',
]

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__"]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.12"
pythonPlatform = "All"

[tool.poe.tasks]
check = [
  { cmd = "uv run ruff check ." },
  { cmd = "uv run ruff format --diff ." },
  { cmd = "uv run pyright" },
]
test = "uv run pytest tests/"
stage-release = "python3 ./scripts/stage-release --output staged-release.zip"
format-code = [
  { cmd = "uv run ruff format ." },
]
# Similar to check, but also auto fixes issues.
auto-check = [
  { cmd = "uv run ruff check --fix ." },
  { cmd = "uv run ruff format ." },
  { cmd = "uv run pyright" },
]
prcheck = ["check", "test"]

# Uncomment if you want to add a CLI script.
# [project.scripts]
# my-cli-command = "module.path.foo:app"